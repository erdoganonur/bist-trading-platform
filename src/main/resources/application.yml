# BIST Trading Platform - Simplified Monolith Configuration
# Single application with all services integrated

server:
  port: 8080
  servlet:
    context-path: /
    encoding:
      charset: UTF-8
      enabled: true
      force: true
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/xml,text/plain,text/css,application/javascript
  http2:
    enabled: true
  error:
    include-message: always
    include-binding-errors: always
    include-stacktrace: on_param
    include-exception: false

spring:
  application:
    name: bist-trading-platform

  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}

  # Temporarily disable Kafka autoconfiguration to fix JSON deserialization
  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration

  # Database Configuration
  datasource:
    url: ${DB_URL:jdbc:postgresql://localhost:5432/bist_trading}
    username: ${DB_USERNAME:bist_trading_user}
    password: ${DB_PASSWORD:bist_trading_pass}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 20000
      idle-timeout: 300000
      max-lifetime: 600000
      pool-name: UserManagementHikariPool
      leak-detection-threshold: 60000
      connection-test-query: SELECT 1

  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: false
        dialect: org.hibernate.dialect.PostgreSQLDialect
        jdbc:
          batch_size: 20
          fetch_size: 50
        cache:
          use_second_level_cache: false
          use_query_cache: false
        generate_statistics: false
    open-in-view: false

  # Flyway Configuration
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
    validate-on-migrate: true
    out-of-order: false
    table: flyway_schema_history

  # Security Configuration
  security:
    require-ssl: false

  # Jackson Configuration
  jackson:
    serialization:
      write-dates-as-timestamps: false
      indent-output: false
    deserialization:
      fail-on-unknown-properties: false
    time-zone: Europe/Istanbul
    locale: tr_TR

  # Async Configuration
  task:
    execution:
      pool:
        core-size: 5
        max-size: 20
        queue-capacity: 100
        keep-alive: 60s
      thread-name-prefix: user-mgmt-task-
    scheduling:
      pool:
        size: 5
      thread-name-prefix: user-mgmt-scheduler-

  # Redis Configuration
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:redis_password}
      database: ${REDIS_DATABASE:1}
      ssl:
        enabled: ${REDIS_SSL_ENABLED:false}
      timeout: ${REDIS_TIMEOUT:2000ms}
      lettuce:
        pool:
          max-active: 10
          max-idle: 8
          min-idle: 2
          max-wait: -1ms
        shutdown-timeout: 100ms

  # Cache Configuration
  cache:
    type: redis
    redis:
      cache-null-values: false
      time-to-live: 300000ms # 5 minutes
      key-prefix: "bist:user-mgmt:"
      use-key-prefix: true

  # Kafka Configuration (disabled temporarily)
#  kafka:
#    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
#    client-id: user-management-service
#    consumer:
#      group-id: ${KAFKA_CONSUMER_GROUP:user-management-group}
#      auto-offset-reset: earliest
#      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
#      properties:
#        spring.json.trusted.packages: "com.bisttrading.*"
#        spring.json.type.mapping: |
#          user-created:com.bisttrading.user.dto.event.UserCreatedEvent,
#          user-updated:com.bisttrading.user.dto.event.UserUpdatedEvent,
#          user-deleted:com.bisttrading.user.dto.event.UserDeletedEvent
#    producer:
#      key-serializer: org.apache.kafka.common.serialization.StringSerializer
#      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
#      properties:
#        spring.json.add.type.headers: false
#    properties:
#      security.protocol: ${KAFKA_SECURITY_PROTOCOL:PLAINTEXT}
#      sasl.mechanism: ${KAFKA_SASL_MECHANISM:PLAIN}
#      sasl.jaas.config: ${KAFKA_SASL_JAAS_CONFIG:}

# Management & Monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,env,configprops,loggers
      base-path: /actuator
      cors:
        allowed-origins: "*"
        allowed-methods: GET,POST
  endpoint:
    health:
      show-details: when_authorized
      probes:
        enabled: true
    info:
      enabled: true
    metrics:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        http.server.requests: true
    tags:
      service: user-management-service
      environment: ${spring.profiles.active}

# Application Info
info:
  app:
    name: ${spring.application.name}
    description: BIST Trading Platform User Management Service
    version: 1.0.0
    encoding: ${server.servlet.encoding.charset}
    java:
      version: ${java.version}
      vendor: ${java.vendor}

# Logging Configuration
logging:
  level:
    com.bisttrading.user: INFO
    com.bisttrading.core.security: INFO
    com.bisttrading.infrastructure.persistence: INFO
    org.springframework.security: WARN
    org.springframework.web: INFO
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: WARN
    org.flywaydb: INFO
    com.zaxxer.hikari: WARN
  pattern:
    console: "%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n%wEx"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/user-management-service.log
  logback:
    rollingpolicy:
      max-file-size: 100MB
      max-history: 30
      total-size-cap: 3GB

# OpenAPI Documentation
springdoc:
  api-docs:
    path: /v3/api-docs
    enabled: ${OPENAPI_ENABLED:true}
  swagger-ui:
    path: /swagger-ui.html
    enabled: ${SWAGGER_UI_ENABLED:true}
    url: /v3/api-docs
    tags-sorter: alpha
    operations-sorter: alpha
    display-request-duration: true
    display-operation-id: false
    default-models-expand-depth: 3
    default-model-expand-depth: 3
    doc-expansion: none
    filter: false
    show-extensions: false
    show-common-extensions: false
    try-it-out-enabled: ${SWAGGER_TRY_IT_OUT:true}
  show-actuator: false
  packages-to-scan: com.bisttrading
  paths-to-match: /api/**

# Resilience4j Configuration
resilience4j:
  circuitbreaker:
    configs:
      default:
        register-health-indicator: true
        failure-rate-threshold: 50
        slow-call-duration-threshold: 5s
        slow-call-rate-threshold: 100
        wait-duration-in-open-state: 60s
        permitted-number-of-calls-in-half-open-state: 10
        sliding-window-type: COUNT_BASED
        sliding-window-size: 100
        minimum-number-of-calls: 5
        automatic-transition-from-open-to-half-open-enabled: true
    instances:
      algolab:
        base-config: default
        register-health-indicator: true

  retry:
    configs:
      default:
        max-attempts: 3
        wait-duration: 2s
        enable-exponential-backoff: true
        exponential-backoff-multiplier: 2
        retry-exceptions:
          - java.io.IOException
          - java.util.concurrent.TimeoutException
          - org.springframework.web.client.ResourceAccessException
        ignore-exceptions:
          - java.lang.IllegalArgumentException
          - com.bisttrading.broker.algolab.exception.AlgoLabAuthenticationException
    instances:
      algolab:
        base-config: default

  timelimiter:
    configs:
      default:
        timeout-duration: 10s
        cancel-running-future: true
    instances:
      algolab:
        base-config: default

  ratelimiter:
    instances:
      algolab:
        limit-for-period: 1
        limit-refresh-period: 5s
        timeout-duration: 10s

# BIST Trading Platform Configuration
bist:
  # Security Configuration
  security:
    jwt:
      public-key-location: ${JWT_PUBLIC_KEY_LOCATION:classpath:keys/jwt-public.pem}
      private-key-location: ${JWT_PRIVATE_KEY_LOCATION:classpath:keys/jwt-private.pem}
      access-token-expiration: ${JWT_ACCESS_TOKEN_EXPIRATION:900} # 15 minutes
      refresh-token-expiration: ${JWT_REFRESH_TOKEN_EXPIRATION:604800} # 7 days
      issuer: ${JWT_ISSUER:bist-trading-platform}
      audience: ${JWT_AUDIENCE:bist-trading-users}

    cors:
      allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:8080}
      allowed-methods: GET,POST,PUT,DELETE,OPTIONS,PATCH
      allowed-headers: "*"
      allow-credentials: true
      max-age: 3600

    rate-limiting:
      enabled: ${RATE_LIMITING_ENABLED:true}
      requests-per-minute: ${RATE_LIMIT_RPM:60}
      burst-capacity: ${RATE_LIMIT_BURST:20}

  # Turkish Validation Configuration
  validation:
    tc-kimlik:
      enabled: ${TC_KIMLIK_VALIDATION_ENABLED:true}
      strict-mode: ${TC_KIMLIK_STRICT_MODE:true}
    phone:
      country-code: "+90"
      require-mobile: true
    password:
      min-length: 8
      require-uppercase: true
      require-lowercase: true
      require-digit: true
      require-special-char: false
      turkish-chars-allowed: true

  # Notification Configuration
  notifications:
    email:
      enabled: ${EMAIL_NOTIFICATIONS_ENABLED:true}
      provider: ${EMAIL_PROVIDER:smtp}
      from-address: ${EMAIL_FROM_ADDRESS:noreply@bisttrading.com}
      from-name: ${EMAIL_FROM_NAME:BIST Trading Platform}
    sms:
      enabled: ${SMS_NOTIFICATIONS_ENABLED:true}
      provider: ${SMS_PROVIDER:turkcell}
      sender-name: ${SMS_SENDER_NAME:BISTRADE}

  # Session Management
  session:
    max-concurrent-sessions: ${MAX_CONCURRENT_SESSIONS:5}
    session-timeout: ${SESSION_TIMEOUT:1800} # 30 minutes
    cleanup-interval: ${SESSION_CLEANUP_INTERVAL:300} # 5 minutes
    redis-key-prefix: "session:"
    serialize-format: json
    cookie:
      name: BIST_SESSION_ID
      http-only: true
      secure: ${SESSION_COOKIE_SECURE:false}
      same-site: strict
      max-age: ${SESSION_TIMEOUT:1800}

  # Account Security
  account:
    max-failed-login-attempts: ${MAX_FAILED_LOGIN_ATTEMPTS:5}
    account-lock-duration: ${ACCOUNT_LOCK_DURATION:3600} # 1 hour
    password-expiry-days: ${PASSWORD_EXPIRY_DAYS:90}
    verification-code-expiry: ${VERIFICATION_CODE_EXPIRY:900} # 15 minutes

  # AlgoLab Session Storage
  algolab-session:
    storage: database  # file or database
    file-path: ./algolab-session.json
    expiration-hours: 24
    retention-days: 30
    cleanup-cron: "0 0 * * * *"  # Every hour
    auto-cleanup: true

  # AlgoLab API Configuration
  integration:
    algolab:
      enabled: ${ALGOLAB_INTEGRATION_ENABLED:true}
      base-url: ${ALGOLAB_BASE_URL:https://api.algolab.com.tr}
      api-key: ${ALGOLAB_API_KEY:your-api-key}
      api-secret: ${ALGOLAB_API_SECRET:your-api-secret}
      version: ${ALGOLAB_API_VERSION:v2.0}
      timeout:
        connect: ${ALGOLAB_CONNECT_TIMEOUT:15000}
        read: ${ALGOLAB_READ_TIMEOUT:30000}
      rate-limit:
        requests-per-minute: ${ALGOLAB_RATE_LIMIT:1000}
        burst-capacity: ${ALGOLAB_BURST_CAPACITY:100}
      retry:
        max-attempts: ${ALGOLAB_MAX_RETRIES:3}
        backoff-delay: ${ALGOLAB_BACKOFF_DELAY:1000}
      endpoints:
        authentication: "/auth"
        user-info: "/user"
        trading: "/trading"
        market-data: "/market-data"
        positions: "/positions"
        orders: "/orders"
      features:
        real-time-data: ${ALGOLAB_REALTIME_DATA:true}
        historical-data: ${ALGOLAB_HISTORICAL_DATA:true}
        order-management: ${ALGOLAB_ORDER_MGMT:true}
        portfolio-tracking: ${ALGOLAB_PORTFOLIO_TRACKING:true}
      security:
        ssl-verification: ${ALGOLAB_SSL_VERIFY:true}
        certificate-path: ${ALGOLAB_CERT_PATH:}

  # Broker Integration Configuration
  brokers:
    denizbank:
      enabled: ${DENIZBANK_INTEGRATION_ENABLED:true}
      base-url: ${DENIZBANK_BASE_URL:https://api.denizbank.com/investment}
      api-version: ${DENIZBANK_API_VERSION:v1.0}
      timeout:
        connect: 20000
        read: 45000
      rate-limit:
        requests-per-minute: 500
    garanti:
      enabled: ${GARANTI_INTEGRATION_ENABLED:true}
      base-url: ${GARANTI_BASE_URL:https://api.garantibbva.com.tr/trading}
      api-version: ${GARANTI_API_VERSION:v1.2}
      timeout:
        connect: 25000
        read: 60000
      rate-limit:
        requests-per-minute: 750

  # Event Publishing Configuration
  events:
    kafka:
      enabled: ${KAFKA_EVENTS_ENABLED:true}
      topics:
        user-created: ${KAFKA_TOPIC_USER_CREATED:user.events.created}
        user-updated: ${KAFKA_TOPIC_USER_UPDATED:user.events.updated}
        user-deleted: ${KAFKA_TOPIC_USER_DELETED:user.events.deleted}
        user-login: ${KAFKA_TOPIC_USER_LOGIN:user.events.login}
        user-logout: ${KAFKA_TOPIC_USER_LOGOUT:user.events.logout}
      retry:
        attempts: 3
        backoff-delay: 1000

  # Turkish Locale Configuration
  locale:
    default-locale: tr_TR
    supported-locales: tr_TR,en_US
    timezone: Europe/Istanbul
    currency: TRY
    number-format:
      decimal-separator: ","
      thousands-separator: "."
    date-format:
      short: "dd.MM.yyyy"
      medium: "dd MMMM yyyy"
      long: "dd MMMM yyyy EEEE"
    time-format:
      short: "HH:mm"
      medium: "HH:mm:ss"

  # Feature Flags
  features:
    two-factor-auth:
      enabled: ${FEATURE_2FA_ENABLED:true}
      mandatory-for-professional: ${FEATURE_2FA_MANDATORY_PRO:true}
    kyc-verification:
      enabled: ${FEATURE_KYC_ENABLED:true}
      auto-verify-test-users: ${FEATURE_KYC_AUTO_VERIFY_TEST:false}
    email-verification:
      enabled: ${FEATURE_EMAIL_VERIFICATION_ENABLED:true}
      required-for-trading: ${FEATURE_EMAIL_REQUIRED_TRADING:true}
    phone-verification:
      enabled: ${FEATURE_PHONE_VERIFICATION_ENABLED:true}
      required-for-trading: ${FEATURE_PHONE_REQUIRED_TRADING:true}
    password-complexity:
      enabled: ${FEATURE_PASSWORD_COMPLEXITY_ENABLED:true}
      check-common-passwords: ${FEATURE_CHECK_COMMON_PASSWORDS:true}
    user-activity-tracking:
      enabled: ${FEATURE_USER_ACTIVITY_TRACKING:true}
      track-ip-changes: ${FEATURE_TRACK_IP_CHANGES:true}
    gdpr-compliance:
      enabled: ${FEATURE_GDPR_ENABLED:true}
      data-retention-days: ${FEATURE_DATA_RETENTION_DAYS:2555} # 7 years