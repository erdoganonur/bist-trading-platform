{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
		"name": "BIST Trading Platform API",
		"description": "Comprehensive Postman collection for BIST Trading Platform APIs including User Management, Order Management, Market Data, and Broker Integration services.\n\n## üöÄ Getting Started\n\n1. **Import Environment**: Import the included environment variables\n2. **Authentication**: Run the login request to get JWT tokens\n3. **Explore APIs**: Use the organized folders to test different services\n\n## üîê Authentication\n\nAll endpoints (except registration/login) require JWT Bearer token authentication:\n- Login to get `accessToken` and `refreshToken`\n- Tokens are automatically stored in environment variables\n- Access token expires in 15 minutes, use refresh token to renew\n\n## üìä Services & Ports\n\n- **API Gateway** (Port 8080): Unified REST API access point\n- **User Management** (Port 8081): Authentication, user profiles\n- **Order Management** (Port 8082): Order lifecycle, trading operations\n- **Market Data** (Port 8083): Real-time data, analytics, technical indicators\n- **Broker Integration** (Port 8084): External broker connectivity, portfolio management\n- **GraphQL Gateway** (Port 8090): Unified GraphQL API access\n\n## üáπüá∑ Turkish Market Support\n\n- TCKN validation for Turkish users\n- BIST symbol support (AKBNK, THYAO, GARAN, etc.)\n- Turkish Lira (TRY) currency\n- Istanbul timezone\n\n**Last Updated**: September 2024\n**Version**: 1.0.0",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "üîê Authentication",
			"item": [
				{
					"name": "User Registration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const responseJson = pm.response.json();",
									"    console.log('‚úÖ User registration successful');",
									"    console.log('User ID:', responseJson.userId);",
									"    pm.environment.set('userId', responseJson.userId);",
									"} else {",
									"    console.log('‚ùå Registration failed:', pm.response.json().message);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Ahmet\",\n  \"lastName\": \"Yƒ±lmaz\",\n  \"email\": \"ahmet.yilmaz@example.com\",\n  \"password\": \"SecurePassword123!\",\n  \"tcknNumber\": \"12345678901\",\n  \"phoneNumber\": \"+905551234567\",\n  \"dateOfBirth\": \"1985-03-15\",\n  \"address\": {\n    \"street\": \"Atat√ºrk Caddesi No: 123\",\n    \"city\": \"ƒ∞stanbul\",\n    \"country\": \"Turkey\",\n    \"postalCode\": \"34000\"\n  }\n}"
						},
						"url": {
							"raw": "{{gatewayUrl}}/api/auth/register",
							"host": [
								"{{gatewayUrl}}"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						},
						"description": "Registers a new user account with Turkish market compliance including TCKN validation."
					},
					"response": []
				},
				{
					"name": "User Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('‚úÖ Login successful');",
									"    ",
									"    // Store tokens for subsequent requests",
									"    pm.environment.set('accessToken', responseJson.accessToken);",
									"    pm.environment.set('refreshToken', responseJson.refreshToken);",
									"    pm.environment.set('userId', responseJson.user.userId);",
									"    ",
									"    console.log('Access Token stored');",
									"    console.log('Expires in:', responseJson.expiresIn, 'seconds');",
									"} else {",
									"    console.log('‚ùå Login failed:', pm.response.json().message);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"ahmet.yilmaz@example.com\",\n  \"password\": \"SecurePassword123!\"\n}"
						},
						"url": {
							"raw": "{{gatewayUrl}}/api/auth/login",
							"host": [
								"{{gatewayUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "Authenticates user and returns JWT access token and refresh token."
					},
					"response": []
				},
				{
					"name": "Refresh Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('‚úÖ Token refresh successful');",
									"    ",
									"    // Update tokens",
									"    pm.environment.set('accessToken', responseJson.accessToken);",
									"    pm.environment.set('refreshToken', responseJson.refreshToken);",
									"} else {",
									"    console.log('‚ùå Token refresh failed:', pm.response.json().message);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
						},
						"url": {
							"raw": "{{gatewayUrl}}/api/auth/refresh",
							"host": [
								"{{gatewayUrl}}"
							],
							"path": [
								"api",
								"auth",
								"refresh"
							]
						},
						"description": "Refreshes the access token using refresh token."
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    console.log('‚úÖ Logout successful');",
									"    ",
									"    // Clear stored tokens",
									"    pm.environment.unset('accessToken');",
									"    pm.environment.unset('refreshToken');",
									"} else {",
									"    console.log('‚ùå Logout failed:', pm.response.json().message);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
						},
						"url": {
							"raw": "{{gatewayUrl}}/api/auth/logout",
							"host": [
								"{{gatewayUrl}}"
							],
							"path": [
								"api",
								"auth",
								"logout"
							]
						},
						"description": "Logs out user and invalidates tokens."
					},
					"response": []
				}
			],
			"description": "User authentication and session management endpoints."
		},
		{
			"name": "üë§ User Management",
			"item": [
				{
					"name": "Get User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('‚úÖ Profile retrieved successfully');",
									"    console.log('Full Name:', responseJson.firstName, responseJson.lastName);",
									"    console.log('Email:', responseJson.email);",
									"    console.log('Account Status:', responseJson.accountStatus);",
									"} else {",
									"    console.log('‚ùå Failed to get profile:', pm.response.json().message);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{gatewayUrl}}/api/v1/users/profile",
							"host": [
								"{{gatewayUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"profile"
							]
						},
						"description": "Retrieves current user profile information."
					},
					"response": []
				},
				{
					"name": "Update User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    console.log('‚úÖ Profile updated successfully');",
									"} else {",
									"    console.log('‚ùå Profile update failed:', pm.response.json().message);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Ahmet\",\n  \"lastName\": \"Yƒ±lmaz\",\n  \"phoneNumber\": \"+905551234568\",\n  \"address\": {\n    \"street\": \"Cumhuriyet Caddesi No: 456\",\n    \"city\": \"Ankara\",\n    \"country\": \"Turkey\",\n    \"postalCode\": \"06000\"\n  },\n  \"preferences\": {\n    \"language\": \"tr\",\n    \"timezone\": \"Europe/Istanbul\",\n    \"notifications\": {\n      \"email\": true,\n      \"sms\": false,\n      \"push\": true\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{userServiceUrl}}/api/users/profile",
							"host": [
								"{{userServiceUrl}}"
							],
							"path": [
								"api",
								"users",
								"profile"
							]
						},
						"description": "Updates user profile information."
					},
					"response": []
				},
				{
					"name": "Change Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    console.log('‚úÖ Password changed successfully');",
									"} else {",
									"    console.log('‚ùå Password change failed:', pm.response.json().message);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"currentPassword\": \"SecurePassword123!\",\n  \"newPassword\": \"NewSecurePassword456!\",\n  \"confirmPassword\": \"NewSecurePassword456!\"\n}"
						},
						"url": {
							"raw": "{{userServiceUrl}}/api/users/change-password",
							"host": [
								"{{userServiceUrl}}"
							],
							"path": [
								"api",
								"users",
								"change-password"
							]
						},
						"description": "Changes user password with current password verification."
					},
					"response": []
				}
			],
			"description": "User profile management and account operations."
		},
		{
			"name": "üíº Trading Operations",
			"item": [
				{
					"name": "Place Limit Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const responseJson = pm.response.json();",
									"    console.log('‚úÖ Order placed successfully');",
									"    console.log('Order ID:', responseJson.orderId);",
									"    console.log('Broker Order ID:', responseJson.brokerOrderId);",
									"    ",
									"    // Store order IDs for subsequent requests",
									"    pm.environment.set('orderId', responseJson.orderId);",
									"    pm.environment.set('brokerOrderId', responseJson.brokerOrderId);",
									"} else {",
									"    console.log('‚ùå Order placement failed:', pm.response.json().message);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"symbol\": \"AKBNK\",\n  \"side\": \"BUY\",\n  \"orderType\": \"LIMIT\",\n  \"quantity\": 1000,\n  \"price\": 15.75,\n  \"timeInForce\": \"DAY\",\n  \"clientOrderId\": \"CLIENT-ORDER-001\"\n}"
						},
						"url": {
							"raw": "{{brokerServiceUrl}}/api/trading/orders",
							"host": [
								"{{brokerServiceUrl}}"
							],
							"path": [
								"api",
								"trading",
								"orders"
							]
						},
						"description": "Places a limit buy order for AKBNK shares."
					},
					"response": []
				},
				{
					"name": "Place Market Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const responseJson = pm.response.json();",
									"    console.log('‚úÖ Market order placed successfully');",
									"    console.log('Order ID:', responseJson.orderId);",
									"} else {",
									"    console.log('‚ùå Order placement failed:', pm.response.json().message);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"symbol\": \"THYAO\",\n  \"side\": \"SELL\",\n  \"orderType\": \"MARKET\",\n  \"quantity\": 500,\n  \"timeInForce\": \"IOC\",\n  \"clientOrderId\": \"CLIENT-ORDER-002\"\n}"
						},
						"url": {
							"raw": "{{brokerServiceUrl}}/api/trading/orders",
							"host": [
								"{{brokerServiceUrl}}"
							],
							"path": [
								"api",
								"trading",
								"orders"
							]
						},
						"description": "Places a market sell order for THYAO shares."
					},
					"response": []
				},
				{
					"name": "Get Order Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('‚úÖ Order details retrieved');",
									"    console.log('Symbol:', responseJson.symbol);",
									"    console.log('Status:', responseJson.status);",
									"    console.log('Filled:', responseJson.filledQuantity + '/' + responseJson.quantity);",
									"} else {",
									"    console.log('‚ùå Failed to get order details:', pm.response.json().message);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{brokerServiceUrl}}/api/trading/orders/{{orderId}}",
							"host": [
								"{{brokerServiceUrl}}"
							],
							"path": [
								"api",
								"trading",
								"orders",
								"{{orderId}}"
							]
						},
						"description": "Retrieves details of a specific order."
					},
					"response": []
				},
				{
					"name": "Cancel Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('‚úÖ Order cancelled successfully');",
									"    console.log('Remaining Quantity:', responseJson.remainingQuantity);",
									"} else {",
									"    console.log('‚ùå Order cancellation failed:', pm.response.json().message);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{brokerServiceUrl}}/api/trading/orders/{{orderId}}",
							"host": [
								"{{brokerServiceUrl}}"
							],
							"path": [
								"api",
								"trading",
								"orders",
								"{{orderId}}"
							]
						},
						"description": "Cancels an existing order by Order ID."
					},
					"response": []
				},
				{
					"name": "Get All Orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('‚úÖ Orders retrieved successfully');",
									"    console.log('Total Orders:', responseJson.totalCount);",
									"    console.log('Active Orders:', responseJson.data.filter(o => o.status === 'ACTIVE').length);",
									"} else {",
									"    console.log('‚ùå Failed to get orders:', pm.response.json().message);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{brokerServiceUrl}}/api/trading/orders?status=ACTIVE&limit=50",
							"host": [
								"{{brokerServiceUrl}}"
							],
							"path": [
								"api",
								"trading",
								"orders"
							],
							"query": [
								{
									"key": "status",
									"value": "ACTIVE"
								},
								{
									"key": "limit",
									"value": "50"
								}
							]
						},
						"description": "Retrieves all orders for current user with optional filtering."
					},
					"response": []
				}
			],
			"description": "Trading operations including order placement, modification, and cancellation."
		},
		{
			"name": "üí∞ Portfolio Management",
			"item": [
				{
					"name": "Get Portfolio",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('‚úÖ Portfolio retrieved successfully');",
									"    console.log('Total Value:', responseJson.totalValue, 'TRY');",
									"    console.log('Cash Balance:', responseJson.cashBalance, 'TRY');",
									"    console.log('Positions:', responseJson.positions.length);",
									"} else {",
									"    console.log('‚ùå Failed to get portfolio:', pm.response.json().message);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{brokerServiceUrl}}/api/trading/portfolio",
							"host": [
								"{{brokerServiceUrl}}"
							],
							"path": [
								"api",
								"trading",
								"portfolio"
							]
						},
						"description": "Retrieves current portfolio positions and balances."
					},
					"response": []
				},
				{
					"name": "Get Position Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('‚úÖ Position details retrieved');",
									"    console.log('Symbol:', responseJson.symbol);",
									"    console.log('Quantity:', responseJson.quantity);",
									"    console.log('P&L:', responseJson.unrealizedPnl, 'TRY');",
									"} else if (pm.response.code === 404) {",
									"    console.log('‚ö†Ô∏è No position found for this symbol');",
									"} else {",
									"    console.log('‚ùå Failed to get position:', pm.response.json().message);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{brokerServiceUrl}}/api/trading/portfolio/positions/AKBNK",
							"host": [
								"{{brokerServiceUrl}}"
							],
							"path": [
								"api",
								"trading",
								"portfolio",
								"positions",
								"AKBNK"
							]
						},
						"description": "Retrieves detailed information about a specific position."
					},
					"response": []
				},
				{
					"name": "Get Account Balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('‚úÖ Account balance retrieved');",
									"    console.log('Total Balance:', responseJson.totalBalance, 'TRY');",
									"    console.log('Available Balance:', responseJson.availableBalance, 'TRY');",
									"} else {",
									"    console.log('‚ùå Failed to get balance:', pm.response.json().message);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{brokerServiceUrl}}/api/trading/account/balance",
							"host": [
								"{{brokerServiceUrl}}"
							],
							"path": [
								"api",
								"trading",
								"account",
								"balance"
							]
						},
						"description": "Retrieves detailed account balance information."
					},
					"response": []
				}
			],
			"description": "Portfolio and account management endpoints."
		},
		{
			"name": "üìä Market Data",
			"item": [
				{
					"name": "Get OHLCV Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('‚úÖ OHLCV data retrieved');",
									"    console.log('Timeframes:', Object.keys(responseJson));",
									"    ",
									"    // Count total data points",
									"    const totalPoints = Object.values(responseJson).reduce((sum, arr) => sum + arr.length, 0);",
									"    console.log('Total data points:', totalPoints);",
									"} else {",
									"    console.log('‚ùå Failed to get OHLCV data:', pm.response.json().message);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{marketDataServiceUrl}}/api/v1/market-data/ohlcv/AKBNK?startTime={{startTime}}&endTime={{endTime}}",
							"host": [
								"{{marketDataServiceUrl}}"
							],
							"path": [
								"api",
								"v1",
								"market-data",
								"ohlcv",
								"AKBNK"
							],
							"query": [
								{
									"key": "startTime",
									"value": "{{startTime}}"
								},
								{
									"key": "endTime",
									"value": "{{endTime}}"
								}
							]
						},
						"description": "Retrieves multi-timeframe OHLCV data for AKBNK symbol."
					},
					"response": []
				},
				{
					"name": "Get Volume Analysis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('‚úÖ Volume analysis retrieved');",
									"    console.log('Total Volume:', responseJson.totalVolume?.toLocaleString());",
									"    console.log('VWAP:', responseJson.vwap);",
									"} else {",
									"    console.log('‚ùå Failed to get volume analysis:', pm.response.json().message);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{marketDataServiceUrl}}/api/v1/market-data/volume/THYAO?startTime={{startTime}}&endTime={{endTime}}",
							"host": [
								"{{marketDataServiceUrl}}"
							],
							"path": [
								"api",
								"v1",
								"market-data",
								"volume",
								"THYAO"
							],
							"query": [
								{
									"key": "startTime",
									"value": "{{startTime}}"
								},
								{
									"key": "endTime",
									"value": "{{endTime}}"
								}
							]
						},
						"description": "Retrieves volume analysis for THYAO symbol including VWAP and volume profile."
					},
					"response": []
				},
				{
					"name": "Get Technical Indicators",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('‚úÖ Technical indicators retrieved');",
									"    console.log('SMA 20 points:', responseJson.sma20?.length);",
									"    console.log('RSI points:', responseJson.rsi?.length);",
									"} else {",
									"    console.log('‚ùå Failed to get technical indicators:', pm.response.json().message);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{marketDataServiceUrl}}/api/v1/market-data/technical/GARAN?timeframe=1 hour&startTime={{startTime}}&endTime={{endTime}}",
							"host": [
								"{{marketDataServiceUrl}}"
							],
							"path": [
								"api",
								"v1",
								"market-data",
								"technical",
								"GARAN"
							],
							"query": [
								{
									"key": "timeframe",
									"value": "1 hour"
								},
								{
									"key": "startTime",
									"value": "{{startTime}}"
								},
								{
									"key": "endTime",
									"value": "{{endTime}}"
								}
							]
						},
						"description": "Retrieves technical indicators (SMA, RSI, Bollinger Bands) for GARAN symbol."
					},
					"response": []
				},
				{
					"name": "Get Order Book Analysis",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('‚úÖ Order book analysis retrieved');",
									"    console.log('Spread analysis points:', responseJson.spreadAnalysis?.length);",
									"    console.log('Depth analysis points:', responseJson.depthAnalysis?.length);",
									"} else {",
									"    console.log('‚ùå Failed to get order book analysis:', pm.response.json().message);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{marketDataServiceUrl}}/api/v1/market-data/orderbook/ISCTR?startTime={{startTime}}&endTime={{endTime}}",
							"host": [
								"{{marketDataServiceUrl}}"
							],
							"path": [
								"api",
								"v1",
								"market-data",
								"orderbook",
								"ISCTR"
							],
							"query": [
								{
									"key": "startTime",
									"value": "{{startTime}}"
								},
								{
									"key": "endTime",
									"value": "{{endTime}}"
								}
							]
						},
						"description": "Retrieves order book analysis including spread, depth, and liquidity metrics."
					},
					"response": []
				}
			],
			"description": "Market data analytics and historical data endpoints."
		},
		{
			"name": "üåê API Gateway Management",
			"item": [
				{
					"name": "Gateway Routes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('‚úÖ Gateway routes retrieved successfully');",
									"    console.log('Total routes:', responseJson.length);",
									"} else {",
									"    console.log('‚ùå Failed to get gateway routes:', pm.response.json().message);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gatewayUrl}}/actuator/gateway/routes",
							"host": [
								"{{gatewayUrl}}"
							],
							"path": [
								"actuator",
								"gateway",
								"routes"
							]
						},
						"description": "Lists all configured gateway routes and their configurations."
					},
					"response": []
				},
				{
					"name": "Gateway Filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('‚úÖ Gateway filters retrieved successfully');",
									"    console.log('Available filters:', Object.keys(responseJson));",
									"} else {",
									"    console.log('‚ùå Failed to get gateway filters:', pm.response.json().message);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gatewayUrl}}/actuator/gateway/globalfilters",
							"host": [
								"{{gatewayUrl}}"
							],
							"path": [
								"actuator",
								"gateway",
								"globalfilters"
							]
						},
						"description": "Lists all available gateway filters."
					},
					"response": []
				}
			],
			"description": "API Gateway management and monitoring endpoints."
		},
		{
			"name": "üìä GraphQL Gateway",
			"item": [
				{
					"name": "GraphQL Query - User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('‚úÖ GraphQL query executed successfully');",
									"    console.log('User data:', responseJson.data);",
									"} else {",
									"    console.log('‚ùå GraphQL query failed:', pm.response.json().message);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query GetUserProfile($userId: ID!) { user(id: $userId) { id firstName lastName email accountStatus } }\",\n  \"variables\": {\n    \"userId\": \"{{userId}}\"\n  }\n}"
						},
						"url": {
							"raw": "{{graphqlGatewayUrl}}/graphql",
							"host": [
								"{{graphqlGatewayUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Execute GraphQL query to get user profile information."
					},
					"response": []
				},
				{
					"name": "GraphQL Query - Market Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('‚úÖ GraphQL market data query executed successfully');",
									"    console.log('Market data:', responseJson.data);",
									"} else {",
									"    console.log('‚ùå GraphQL query failed:', pm.response.json().message);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query GetMarketData($symbol: String!) { marketData(symbol: $symbol) { symbol lastPrice volume change changePercent } }\",\n  \"variables\": {\n    \"symbol\": \"AKBNK\"\n  }\n}"
						},
						"url": {
							"raw": "{{graphqlGatewayUrl}}/graphql",
							"host": [
								"{{graphqlGatewayUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Execute GraphQL query to get market data for a specific symbol."
					},
					"response": []
				},
				{
					"name": "GraphQL Schema Introspection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('‚úÖ GraphQL schema retrieved successfully');",
									"    console.log('Available types:', responseJson.data.__schema.types.length);",
									"} else {",
									"    console.log('‚ùå Schema introspection failed:', pm.response.json().message);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query IntrospectionQuery { __schema { types { name description } } }\"\n}"
						},
						"url": {
							"raw": "{{graphqlGatewayUrl}}/graphql",
							"host": [
								"{{graphqlGatewayUrl}}"
							],
							"path": [
								"graphql"
							]
						},
						"description": "Get GraphQL schema information via introspection."
					},
					"response": []
				}
			],
			"description": "GraphQL Gateway endpoints for unified API access."
		},
		{
			"name": "üîß Direct Service Access",
			"item": [
				{
					"name": "User Service - Direct Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    console.log('‚úÖ User Management Service is healthy (direct access)');",
									"} else {",
									"    console.log('‚ùå User Management Service health check failed (direct access)');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{userServiceUrl}}/actuator/health",
							"host": [
								"{{userServiceUrl}}"
							],
							"path": [
								"actuator",
								"health"
							]
						},
						"description": "Direct health check for User Management Service."
					},
					"response": []
				},
				{
					"name": "User Service - Swagger UI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    console.log('‚úÖ User Service Swagger UI accessible');",
									"} else {",
									"    console.log('‚ùå User Service Swagger UI not accessible');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{userServiceUrl}}/swagger-ui.html",
							"host": [
								"{{userServiceUrl}}"
							],
							"path": [
								"swagger-ui.html"
							]
						},
						"description": "Access User Management Service Swagger documentation."
					},
					"response": []
				},
				{
					"name": "Order Service - Direct Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    console.log('‚úÖ Order Management Service is healthy (direct access)');",
									"} else {",
									"    console.log('‚ùå Order Management Service health check failed (direct access)');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{orderServiceUrl}}/actuator/health",
							"host": [
								"{{orderServiceUrl}}"
							],
							"path": [
								"actuator",
								"health"
							]
						},
						"description": "Direct health check for Order Management Service."
					},
					"response": []
				},
				{
					"name": "Market Data Service - Direct Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    console.log('‚úÖ Market Data Service is healthy (direct access)');",
									"} else {",
									"    console.log('‚ùå Market Data Service health check failed (direct access)');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{marketDataServiceUrl}}/actuator/health",
							"host": [
								"{{marketDataServiceUrl}}"
							],
							"path": [
								"actuator",
								"health"
							]
						},
						"description": "Direct health check for Market Data Service."
					},
					"response": []
				},
				{
					"name": "Market Data Service - Swagger UI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    console.log('‚úÖ Market Data Service Swagger UI accessible');",
									"} else {",
									"    console.log('‚ùå Market Data Service Swagger UI not accessible');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{marketDataServiceUrl}}/swagger-ui.html",
							"host": [
								"{{marketDataServiceUrl}}"
							],
							"path": [
								"swagger-ui.html"
							]
						},
						"description": "Access Market Data Service Swagger documentation."
					},
					"response": []
				},
				{
					"name": "Broker Service - Direct Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    console.log('‚úÖ Broker Integration Service is healthy (direct access)');",
									"} else {",
									"    console.log('‚ùå Broker Integration Service health check failed (direct access)');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{brokerServiceUrl}}/actuator/health",
							"host": [
								"{{brokerServiceUrl}}"
							],
							"path": [
								"actuator",
								"health"
							]
						},
						"description": "Direct health check for Broker Integration Service."
					},
					"response": []
				},
				{
					"name": "Broker Service - Swagger UI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    console.log('‚úÖ Broker Integration Service Swagger UI accessible');",
									"} else {",
									"    console.log('‚ùå Broker Integration Service Swagger UI not accessible');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{brokerServiceUrl}}/swagger-ui.html",
							"host": [
								"{{brokerServiceUrl}}"
							],
							"path": [
								"swagger-ui.html"
							]
						},
						"description": "Access Broker Integration Service Swagger documentation."
					},
					"response": []
				}
			],
			"description": "Direct access to individual services bypassing the gateway."
		},
		{
			"name": "üè• Health Checks",
			"item": [
				{
					"name": "User Service Health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    console.log('‚úÖ User Management Service is healthy');",
									"} else {",
									"    console.log('‚ùå User Management Service health check failed');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{userServiceUrl}}/actuator/health",
							"host": [
								"{{userServiceUrl}}"
							],
							"path": [
								"actuator",
								"health"
							]
						},
						"description": "Checks the health status of User Management Service."
					},
					"response": []
				},
				{
					"name": "Broker Service Health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    console.log('‚úÖ Broker Integration Service is healthy');",
									"} else {",
									"    console.log('‚ùå Broker Integration Service health check failed');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{brokerServiceUrl}}/actuator/health",
							"host": [
								"{{brokerServiceUrl}}"
							],
							"path": [
								"actuator",
								"health"
							]
						},
						"description": "Checks the health status of Broker Integration Service."
					},
					"response": []
				},
				{
					"name": "Market Data Service Health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    console.log('‚úÖ Market Data Service is healthy');",
									"} else {",
									"    console.log('‚ùå Market Data Service health check failed');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{marketDataServiceUrl}}/actuator/health",
							"host": [
								"{{marketDataServiceUrl}}"
							],
							"path": [
								"actuator",
								"health"
							]
						},
						"description": "Checks the health status of Market Data Service."
					},
					"response": []
				}
			],
			"description": "Health check endpoints for all services."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Auto-generate timestamps for requests",
					"const now = new Date();",
					"const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);",
					"",
					"pm.environment.set('startTime', oneHourAgo.toISOString());",
					"pm.environment.set('endTime', now.toISOString());",
					"",
					"// Check if we have required tokens for authenticated requests",
					"if (pm.request.headers.find(h => h.key === 'Authorization')) {",
					"    const accessToken = pm.environment.get('accessToken');",
					"    if (!accessToken || accessToken === '') {",
					"        console.log('‚ö†Ô∏è  No access token found. Please login first.');",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global response logging",
					"console.log('Response Status:', pm.response.code, pm.response.status);",
					"",
					"// Check for common error conditions",
					"if (pm.response.code === 401) {",
					"    console.log('üîê Authentication required or token expired');",
					"} else if (pm.response.code === 403) {",
					"    console.log('üö´ Access forbidden - insufficient permissions');",
					"} else if (pm.response.code === 429) {",
					"    console.log('‚è∞ Rate limit exceeded - please wait before retrying');",
					"} else if (pm.response.code >= 500) {",
					"    console.log('üö® Server error - please check service status');",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "gatewayUrl",
			"value": "http://localhost:8080",
			"type": "string",
			"description": "API Gateway URL for unified REST API access"
		},
		{
			"key": "userServiceUrl",
			"value": "http://localhost:8081",
			"type": "string",
			"description": "User Management Service direct URL"
		},
		{
			"key": "orderServiceUrl",
			"value": "http://localhost:8082",
			"type": "string",
			"description": "Order Management Service direct URL"
		},
		{
			"key": "marketDataServiceUrl",
			"value": "http://localhost:8083",
			"type": "string",
			"description": "Market Data Service direct URL"
		},
		{
			"key": "brokerServiceUrl",
			"value": "http://localhost:8084",
			"type": "string",
			"description": "Broker Integration Service direct URL"
		},
		{
			"key": "graphqlGatewayUrl",
			"value": "http://localhost:8090",
			"type": "string",
			"description": "GraphQL Gateway URL for unified GraphQL API access"
		},
		{
			"key": "accessToken",
			"value": "",
			"type": "string",
			"description": "JWT access token for authentication"
		},
		{
			"key": "refreshToken",
			"value": "",
			"type": "string",
			"description": "JWT refresh token for token renewal"
		},
		{
			"key": "userId",
			"value": "",
			"type": "string",
			"description": "Current user ID"
		},
		{
			"key": "orderId",
			"value": "",
			"type": "string",
			"description": "Current order ID for testing"
		},
		{
			"key": "brokerOrderId",
			"value": "",
			"type": "string",
			"description": "Broker-assigned order ID"
		},
		{
			"key": "startTime",
			"value": "",
			"type": "string",
			"description": "Start time for market data queries (ISO format)"
		},
		{
			"key": "endTime",
			"value": "",
			"type": "string",
			"description": "End time for market data queries (ISO format)"
		}
	]
}