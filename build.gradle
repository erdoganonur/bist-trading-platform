plugins {
    id 'java-platform'
    id 'org.springframework.boot' version '3.3.0' apply false
    id 'io.spring.dependency-management' version '1.1.5' apply false
    id 'org.sonarqube' version '5.0.0.4638'
    id 'jacoco'
}

allprojects {
    group = 'com.bisttrading'
    version = '1.0.0-SNAPSHOT'

    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'https://repo.spring.io/snapshot' }
    }
}

ext {
    springBootVersion = '3.3.0'
    springCloudVersion = '2023.0.2'
    postgresqlVersion = '42.7.3'
    jedisVersion = '5.1.3'
    kafkaVersion = '3.8.0'
    lombokVersion = '1.18.32'
    mapstructVersion = '1.5.5.Final'
    flywayVersion = '10.15.0'
    timescaledbVersion = '42.7.3'
    testcontainersVersion = '1.19.8'
    junitVersion = '5.10.3'
    mockitoVersion = '5.12.0'
    assertjVersion = '3.26.0'
    openApiVersion = '2.5.0'
    hibernateValidatorVersion = '8.0.1.Final'
    jacksonVersion = '2.17.1'
    logbackVersion = '1.5.6'
    slf4jVersion = '2.0.13'
    aspectjVersion = '1.9.22.1'
    resilience4jVersion = '2.2.0'
    micrometerVersion = '1.13.1'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'

    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
            mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
        }

        dependencies {
            dependency "org.postgresql:postgresql:${postgresqlVersion}"
            dependency "redis.clients:jedis:${jedisVersion}"
            dependency "org.apache.kafka:kafka-clients:${kafkaVersion}"
            dependency "org.projectlombok:lombok:${lombokVersion}"
            dependency "org.mapstruct:mapstruct:${mapstructVersion}"
            dependency "org.mapstruct:mapstruct-processor:${mapstructVersion}"
            dependency "org.flywaydb:flyway-core:${flywayVersion}"
            dependency "org.flywaydb:flyway-database-postgresql:${flywayVersion}"
            dependency "com.timescale:timescaledb-jdbc:${timescaledbVersion}"
            dependency "org.junit.jupiter:junit-jupiter:${junitVersion}"
            dependency "org.mockito:mockito-core:${mockitoVersion}"
            dependency "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
            dependency "org.assertj:assertj-core:${assertjVersion}"
            dependency "org.springdoc:springdoc-openapi-starter-webmvc-ui:${openApiVersion}"
            dependency "org.hibernate.validator:hibernate-validator:${hibernateValidatorVersion}"
            dependency "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
            dependency "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
            dependency "ch.qos.logback:logback-classic:${logbackVersion}"
            dependency "org.slf4j:slf4j-api:${slf4jVersion}"
            dependency "org.aspectj:aspectjweaver:${aspectjVersion}"
            dependency "io.github.resilience4j:resilience4j-spring-boot3:${resilience4jVersion}"
            dependency "io.micrometer:micrometer-registry-prometheus:${micrometerVersion}"
            dependency "org.hibernate:hibernate-core:6.4.4.Final"
            dependency "org.hibernate:hibernate-envers:6.4.4.Final"
            dependency "org.hibernate:hibernate-jcache:6.4.4.Final"
            dependency "io.opentelemetry:opentelemetry-api:1.40.0"
            dependency "io.opentelemetry:opentelemetry-exporter-jaeger:1.40.0"
            dependency "io.opentelemetry:opentelemetry-extension-annotations:1.40.0"
        }
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        annotationProcessor 'org.mapstruct:mapstruct-processor'

        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.testcontainers:junit-jupiter'
        testImplementation 'org.testcontainers:postgresql'
        testImplementation 'org.junit.jupiter:junit-jupiter'
        testImplementation 'org.mockito:mockito-core'
        testImplementation 'org.mockito:mockito-junit-jupiter'
        testImplementation 'org.assertj:assertj-core'
    }

    tasks.named('test') {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }

    jacocoTestReport {
        dependsOn test
        reports {
            xml.required = true
            csv.required = false
            html.required = true
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.compilerArgs += [
            '-Amapstruct.suppressGeneratorTimestamp=true',
            '-Amapstruct.defaultComponentModel=spring'
        ]
    }
}

sonar {
    properties {
        property 'sonar.projectKey', 'bist-trading-platform'
        property 'sonar.projectName', 'BIST Trading Platform'
        property 'sonar.host.url', 'http://localhost:9000'
        property 'sonar.coverage.jacoco.xmlReportPaths', '**/build/reports/jacoco/test/jacocoTestReport.xml'
        property 'sonar.java.source', '21'
        property 'sonar.sources', 'src/main/java'
        property 'sonar.tests', 'src/test/java'
        property 'sonar.exclusions', '**/generated/**/*'
    }
}

task aggregateJacocoReport(type: JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs.from = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.from = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(subprojects.sourceSets.main.output)
    executionData.from = files(subprojects.jacocoTestReport.executionData)

    reports {
        html.required = true
        xml.required = true
        csv.required = false
    }

    onlyIf = { true }
    doFirst {
        executionData.from = files(executionData.findAll { it.exists() })
    }
}

wrapper {
    gradleVersion = '8.8'
    distributionType = Wrapper.DistributionType.ALL
}