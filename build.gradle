plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'jacoco'
}

group = 'com.bisttrading'
version = '2.0.0-SIMPLIFIED'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    // Spring Boot starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-cache'

    // WebSocket client dependencies
    implementation 'org.springframework:spring-websocket:6.1.10'
    implementation 'org.springframework:spring-messaging:6.1.10'
    implementation 'jakarta.websocket:jakarta.websocket-api:2.1.1'
    implementation 'jakarta.websocket:jakarta.websocket-client-api:2.1.1'
    implementation 'org.glassfish.tyrus.bundles:tyrus-standalone-client:2.1.3'

    // Database
    implementation 'org.postgresql:postgresql:42.7.3'
    implementation 'org.flywaydb:flyway-core:10.15.0'
    implementation 'org.flywaydb:flyway-database-postgresql:10.15.0'

    // Redis (for session management)
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // Security & JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.5'

    // API Documentation
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'

    // Utilities
    implementation 'org.projectlombok:lombok:1.18.32'
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.1'
    implementation 'org.apache.commons:commons-lang3:3.14.0'
    implementation 'org.apache.commons:commons-collections4:4.4'

    // AlgoLab integration dependencies
    implementation 'com.google.guava:guava:32.1.2-jre' // RateLimiter
    implementation 'commons-codec:commons-codec:1.15' // SHA-256

    // Resilience4j - Circuit Breaker, Retry, Rate Limiter, Time Limiter
    implementation 'io.github.resilience4j:resilience4j-spring-boot3:2.2.0'
    implementation 'io.github.resilience4j:resilience4j-circuitbreaker:2.2.0'
    implementation 'io.github.resilience4j:resilience4j-retry:2.2.0'
    implementation 'io.github.resilience4j:resilience4j-timelimiter:2.2.0'
    implementation 'io.github.resilience4j:resilience4j-micrometer:2.2.0'
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    // Monitoring & Metrics
    implementation 'io.micrometer:micrometer-registry-prometheus:1.13.1'

    // Async HTTP client for broker integration
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.3.1'

    // Annotation processors
    annotationProcessor 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // Development tools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Test dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:junit-jupiter:1.19.7'
    testImplementation 'org.testcontainers:postgresql:1.19.7'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.3'
    testImplementation 'org.mockito:mockito-core:5.12.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.12.0'
    testImplementation 'org.assertj:assertj-core:3.26.0'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:3.3.4"
        mavenBom "org.testcontainers:testcontainers-bom:1.19.7"
    }
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs += [
        '-Amapstruct.suppressGeneratorTimestamp=true',
        '-Amapstruct.defaultComponentModel=spring'
    ]
}

// Boot jar configuration
jar {
    enabled = false
    archiveClassifier = ''
}

bootJar {
    enabled = true
    archiveClassifier = ''
    archiveFileName = "bist-trading-platform-${version}.jar"

    manifest {
        attributes(
            'Implementation-Title': 'BIST Trading Platform',
            'Implementation-Version': version,
            'Implementation-Vendor': 'BIST Trading Platform Team',
            'Built-By': System.getProperty('user.name'),
            'Built-Date': new Date().toString(),
            'Built-JDK': System.getProperty('java.version'),
            'Built-Gradle': gradle.gradleVersion,
            'Main-Class': 'com.bisttrading.BistTradingPlatformApplication'
        )
    }
}

// Application configuration
springBoot {
    mainClass = 'com.bisttrading.BistTradingPlatformApplication'
    buildInfo()
}

// Disable tests if needed during development
if (project.hasProperty('skipTests') && skipTests == 'true') {
    tasks.withType(Test) {
        enabled = false
    }
}

wrapper {
    gradleVersion = '9.0'
    distributionType = Wrapper.DistributionType.ALL
}