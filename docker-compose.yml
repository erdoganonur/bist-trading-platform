services:
  # PostgreSQL Database with TimescaleDB
  postgres:
    image: timescale/timescaledb:latest-pg16
    container_name: bist-postgres
    environment:
      POSTGRES_DB: bist_trading
      POSTGRES_USER: bist_user
      POSTGRES_PASSWORD: bist_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - bist-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bist_user -d bist_trading"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7.4-alpine
    container_name: bist-redis
    environment:
      REDIS_PASSWORD: redis_password
    command: redis-server --requirepass redis_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - bist-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Apache Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: bist-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - bist-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: bist-kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "29092:29092"
    networks:
      - bist-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3

  # BIST Trading Platform - REAL Monolith (Optional - for full Docker deployment)
  # Comment out this section when running app from IntelliJ
  # bist-app:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: bist-trading-app
  #   environment:
  #     SPRING_PROFILES_ACTIVE: docker
  #     SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/bist_trading
  #     SPRING_DATASOURCE_USERNAME: bist_user
  #     SPRING_DATASOURCE_PASSWORD: bist_password
  #     SPRING_FLYWAY_ENABLED: false
  #     SPRING_JPA_HIBERNATE_DDL_AUTO: update
  #     SPRING_DATA_REDIS_HOST: redis
  #     SPRING_DATA_REDIS_PORT: 6379
  #     SPRING_DATA_REDIS_PASSWORD: redis_password
  #     SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
  #     BIST_SECURITY_JWT_SECRET: bist-trading-platform-super-secret-key-for-jwt-tokens-256-bit-long
  #     SERVER_PORT: 8080
  #   ports:
  #     - "8080:8080"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #     kafka:
  #       condition: service_healthy
  #   networks:
  #     - bist-network
  #   volumes:
  #     - app_logs:/app/logs
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 60s

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local

networks:
  bist-network:
    driver: bridge